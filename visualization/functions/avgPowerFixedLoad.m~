function [apfl] = avgPowerFixedLoad(wecs,batts,draw,mdpsim)

% mdpInputs
% ld = load('WETSForecastMatrix');
% FM = ld.WETSForecastMatrix.FM_subset;
% clear WETSForecastMatrix
apfl(length(wecs),length(batts)) = struct();
amp = mdpsim(1,1).amp;
mdp = mdpsim(1,1).mdp;
for w = 1:length(wecs)
    %wec.B = wecs(w);
    %unpack data
    %[FM_P,~] = modifyFM(FM,frc,mdp,wec);
    for b = 1:length(batts)
        FM_P = mdpsim(w,b).output.FM_P;
        if mdpsim(w,b).frc.pb_abr
            flength = mdpsim(w,b).frc.abr_val;
        else
            flength = size(FM_P,2);
        end
        amp.E_max = batts(b);
        E = zeros(size(FM_P,2),1);
        L = ones(size(FM_P,2),1)*draw;
        A = zeros(size(FM_P,2),1);
        E(1) = batts(b)/2;
        for i = 1:flength-1
            sd = E(i)*(amp.sdr/100)*(1/(30*24))*mdp.dt; %[Wh] self disc
            E(i+1) = mdp.dt*(FM_P(1,i,2) - L(i)) + E(i) - sd;
            A(i) = 4; %assume full power unless...
            if E(i+1) > amp.E_max %topped out, discard power
                E(i+1) = amp.E_max;
            elseif E(i+1) < 0 %bottomed out
                L(i) = 0;
                A(i) = 1; %not full power, call it survival mode
                E(i+1) = E(i);
            end
        end
        apfl(w,b).p_avg = mean(L(1:);
        %variables needed to calculate intermittency and degradatoin
        %apfl(w,b).output.a_sim = 4.*ones(size(E));
        apfl(w,b).output.a_sim = A;
        apfl(w,b).output.E_sim = E;
        apfl(w,b).output.FM_mod = mdpsim(w,b).output.FM_mod;
    end
end

end

